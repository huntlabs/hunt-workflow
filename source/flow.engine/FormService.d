/* Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

//          Copyright linse 2020. 
// Distributed under the Boost Software License, Version 1.0. 
//    (See accompanying file LICENSE_1_0.txt or copy at 
//          http://www.boost.org/LICENSE_1_0.txt)} 
 
module flow.engine.FormService;
 
 
 


import java.util.Map;

import flow.engine.form.StartFormData;
import flow.engine.form.TaskFormData;
import flow.engine.runtime.ProcessInstance;
import flow.engine.runtime.ProcessInstanceQuery;
import org.flowable.task.api.Task;
import org.flowable.task.api.TaskQuery;

/**
 * Access to form data and rendered forms for starting new process instances and completing tasks.
 * 
 * @author Tom Baeyens
 * @author Falko Menge (camunda)
 */
interface FormService {

    /**
     * Retrieves all data necessary for rendering a form to start a new process instance. This can be used to perform rendering of the forms outside of the process engine.
     */
    StartFormData getStartFormData(string processDefinitionId);

    /**
     * Rendered form generated by the default build-in form engine for starting a new process instance.
     */
    Object getRenderedStartForm(string processDefinitionId);

    /**
     * Rendered form generated by the given build-in form engine for starting a new process instance.
     */
    Object getRenderedStartForm(string processDefinitionId, string formEngineName);

    /**
     * Start a new process instance with the user data that was entered as properties in a start form.
     */
    ProcessInstance submitStartFormData(string processDefinitionId, Map<string, string> properties);

    /**
     * Start a new process instance with the user data that was entered as properties in a start form.
     * 
     * A business key can be provided to associate the process instance with a certain identifier that has a clear business meaning. For example in an order process, the business key could be an order
     * id. This business key can then be used to easily look up that process instance , see {@link ProcessInstanceQuery#processInstanceBusinessKey(string)}. Providing such a business key is definitely
     * a best practice.
     * 
     * @param processDefinitionId
     *            the id of the process definition, cannot be null.
     * @param businessKey
     *            a key that identifies the process instance and can be used to retrieve the process instance later via the query API.
     * @param properties
     *            the properties to pass, can be null.
     */
    ProcessInstance submitStartFormData(string processDefinitionId, string businessKey, Map<string, string> properties);

    /**
     * Retrieves all data necessary for rendering a form to complete a task. This can be used to perform rendering of the forms outside of the process engine.
     */
    TaskFormData getTaskFormData(string taskId);

    /**
     * Rendered form generated by the default build-in form engine for completing a task.
     */
    Object getRenderedTaskForm(string taskId);

    /**
     * Rendered form generated by the given build-in form engine for completing a task.
     */
    Object getRenderedTaskForm(string taskId, string formEngineName);

    /**
     * Completes a task with the user data that was entered as properties in a task form.
     */
    void submitTaskFormData(string taskId, Map<string, string> properties);

    /** Save the data that was entered as properties in a task form. */
    void saveFormData(string taskId, Map<string, string> properties);

    /**
     * Retrieves a user defined reference to a start form.
     * 
     * In the Explorer app, it is assumed that the form key specifies a resource in the deployment, which is the template for the form. But users are free to use this property differently.
     */
    string getStartFormKey(string processDefinitionId);

    /**
     * Retrieves a user defined reference to a task form.
     * 
     * In the Explorer app, it is assumed that the form key specifies a resource in the deployment, which is the template for the form. But users are free to use this property differently.
     * 
     * Both arguments can be obtained from {@link Task} instances returned by any {@link TaskQuery}.
     */
    string getTaskFormKey(string processDefinitionId, string taskDefinitionKey);

}
